{"name": "Connection to find pets by invalid id", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: -222 does not exist\nassert 404 == 200\n +  where 404 = <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>>('/pet/', '-222')\n +    where <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>> = <api_create.ApiPet object at 0x000002593D173220>.get_pet_id\n +    and   '/pet/' = <test_api.TestApiExam object at 0x000002593D0D02B0>.get_id_url\n +    and   '-222' = str(-222)", "trace": "self = <test_api.TestApiExam object at 0x000002593D0D02B0>, create_pet_object = <api_create.ApiPet object at 0x000002593D173220>, _id = -222\n\n    @allure.title(\"Connection to find pets by invalid id\")\n    @allure.description(\"Check relevant response and validate data structure\")\n    @pytest.mark.xfail\n    @pytest.mark.parametrize(\"_id\", [0, -222, 0000, -1])\n    def test_get_by_invalid_id(self, create_pet_object, _id):\n        with allure.step(\"check status code\"):\n>           assert create_pet_object.get_pet_id(self.get_id_url, str(_id)) == 200, f'{_id} does not exist'\nE           AssertionError: -222 does not exist\nE           assert 404 == 200\nE            +  where 404 = <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>>('/pet/', '-222')\nE            +    where <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>> = <api_create.ApiPet object at 0x000002593D173220>.get_pet_id\nE            +    and   '/pet/' = <test_api.TestApiExam object at 0x000002593D0D02B0>.get_id_url\nE            +    and   '-222' = str(-222)\n\ntests\\test_api.py:61: AssertionError"}, "description": "Check relevant response and validate data structure", "steps": [{"name": "check status code", "status": "failed", "statusDetails": {"message": "AssertionError: -222 does not exist\nassert 404 == 200\n +  where 404 = <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>>('/pet/', '-222')\n +    where <bound method ApiPet.get_pet_id of <api_create.ApiPet object at 0x000002593D173220>> = <api_create.ApiPet object at 0x000002593D173220>.get_pet_id\n +    and   '/pet/' = <test_api.TestApiExam object at 0x000002593D0D02B0>.get_id_url\n +    and   '-222' = str(-222)\n", "trace": "  File \"D:\\PyProjects\\homework\\pythonProject\\tests\\test_api.py\", line 61, in test_get_by_invalid_id\n    assert create_pet_object.get_pet_id(self.get_id_url, str(_id)) == 200, f'{_id} does not exist'\n"}, "start": 1703710482432, "stop": 1703710483154}], "parameters": [{"name": "_id", "value": "-222"}], "start": 1703710482432, "stop": 1703710483155, "uuid": "33fe7c5c-c00d-4e04-8144-a4f98710a038", "historyId": "311a0772b2e261210e96de699da96eb5", "testCaseId": "251e9eadacbcc6fae7397cf2fbe851dd", "fullName": "tests.test_api.TestApiExam#test_get_by_invalid_id", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiExam"}, {"name": "host", "value": "DESKTOP-Q0K3D1C"}, {"name": "thread", "value": "18048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}